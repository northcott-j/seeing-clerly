{"version":3,"sources":["auth/auth.service.js"],"names":["passport","require","config","jwt","isAuthenticated","req","res","token","body","query","headers","cookies","status","send","verifyToken","err","decoded","authenticateRoute","next","redirect","signToken","user","creator","sign","secrets","session","expiresIn","callback","substring","length","verify","exports"],"mappings":"AAAA;;AAEA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;AACA,IAAIC,SAASD,QAAQ,uBAAR,CAAb;AACA,IAAIE,MAAMF,QAAQ,cAAR,CAAV;;AAEA;;;;AAIA,SAASG,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmC;AACjC,MAAIC,QAAQF,IAAIG,IAAJ,CAASD,KAAT,IAAkBF,IAAII,KAAJ,CAAUF,KAA5B,IAAqCF,IAAIK,OAAJ,CAAY,gBAAZ,CAArC,IAAsEL,IAAIM,OAAJ,CAAYJ,KAA9F;AACA,MAAI,CAACA,KAAL,EAAY;AACVD,QAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACD,GAFD,MAEO;AACLC,gBAAYP,KAAZ,EAAmB,UAAUQ,GAAV,EAAeC,OAAf,EAAwB;AACzC,UAAID,GAAJ,EAAS;AACPT,YAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACD,OAFD,MAEO;AACL;AACAR,YAAIW,OAAJ,GAAcA,OAAd;AACAV,YAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACD;AACF,KARD;AASD;AACF;;AAED;AACA,SAASI,iBAAT,CAA2BZ,GAA3B,EAAgCC,GAAhC,EAAqCY,IAArC,EAA2C;AACzC,MAAIX,QAAQF,IAAIG,IAAJ,CAASD,KAAT,IAAkBF,IAAII,KAAJ,CAAUF,KAA5B,IAAqCF,IAAIK,OAAJ,CAAY,gBAAZ,CAArC,IAAsEL,IAAIM,OAAJ,CAAYJ,KAA9F;AACA,MAAI,CAACA,KAAL,EAAY;AACVD,QAAIM,MAAJ,CAAW,GAAX,EAAgBO,QAAhB,CAAyB,QAAzB;AACD,GAFD,MAEO;AACLL,gBAAYP,KAAZ,EAAmB,UAAUQ,GAAV,EAAeC,OAAf,EAAwB;AACzC,UAAID,GAAJ,EAAS;AACPT,YAAIM,MAAJ,CAAW,GAAX,EAAgBO,QAAhB,CAAyB,QAAzB;AACD,OAFD,MAEO;AACL;AACAd,YAAIW,OAAJ,GAAcA,OAAd;AACAV,YAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AACA,eAAOK,MAAP;AACD;AACF,KATD;AAUD;AACF;;AAED;;;AAGA,SAASE,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,MAAIA,KAAKC,OAAL,KAAiB,KAArB,EAA4B;AAC1B,WAAOnB,IAAIoB,IAAJ,CAASF,IAAT,EAAenB,OAAOsB,OAAP,CAAeC,OAA9B,EAAuC,EAACC,WAAW,IAAZ,EAAvC,CAAP;AACD,GAFD,MAEO;AACL,WAAOvB,IAAIoB,IAAJ,CAASF,IAAT,EAAenB,OAAOsB,OAAP,CAAeC,OAA9B,EAAuC,EAACC,WAAW,IAAZ,EAAvC,CAAP;AACD;AACF;;AAED,SAASZ,WAAT,CAAqBP,KAArB,EAA4BoB,QAA5B,EAAsC;AACpC,MAAIpB,SAASA,MAAM,CAAN,MAAa,GAA1B,EAA+B;AAC7B;AACAA,YAAQA,MAAMqB,SAAN,CAAgB,CAAhB,EAAmBrB,MAAMsB,MAAN,GAAe,CAAlC,CAAR;AACD;AACD1B,MAAI2B,MAAJ,CAAWvB,KAAX,EAAkBL,OAAOsB,OAAP,CAAeC,OAAjC,EAA0CE,QAA1C;AACD;;AAEDI,QAAQ3B,eAAR,GAA0BA,eAA1B;AACA2B,QAAQX,SAAR,GAAoBA,SAApB;AACAW,QAAQd,iBAAR,GAA4BA,iBAA5B","file":"auth/auth.service.js","sourcesContent":["'use strict';\n\nvar passport = require('passport');\nvar config = require('../config/environment');\nvar jwt = require('jsonwebtoken');\n\n/**\n * Attaches the user object to the request if authenticated\n * Otherwise returns 403\n */\nfunction isAuthenticated(req, res) {\n  var token = req.body.token || req.query.token || req.headers['X-Access-Token'] || req.cookies.token;\n  if (!token) {\n    res.status(401).send();\n  } else {\n    verifyToken(token, function (err, decoded) {\n      if (err) {\n        res.status(401).send();\n      } else {\n        // if everything is good, save to request for use in other routes\n        req.decoded = decoded;\n        res.status(200).send();\n      }\n    });\n  }\n}\n\n// Checks route and redirects if necessary\nfunction authenticateRoute(req, res, next) {\n  var token = req.body.token || req.query.token || req.headers['X-Access-Token'] || req.cookies.token;\n  if (!token) {\n    res.status(401).redirect('/login');\n  } else {\n    verifyToken(token, function (err, decoded) {\n      if (err) {\n        res.status(401).redirect('/login');\n      } else {\n        // if everything is good, save to request for use in other routes\n        req.decoded = decoded;\n        res.status(200).send();\n        return next();\n      }\n    });\n  }\n}\n\n/**\n * Returns a jwt token signed by the app secret\n */\nfunction signToken(user) {\n  if (user.creator === 'God') {\n    return jwt.sign(user, config.secrets.session, {expiresIn: '4d'});\n  } else {\n    return jwt.sign(user, config.secrets.session, {expiresIn: '20'});\n  }\n}\n\nfunction verifyToken(token, callback) {\n  if (token && token[0] === '\"') {\n    // means that there are extra quotes around the token\n    token = token.substring(1, token.length - 1);\n  }\n  jwt.verify(token, config.secrets.session, callback);\n}\n\nexports.isAuthenticated = isAuthenticated;\nexports.signToken = signToken;\nexports.authenticateRoute = authenticateRoute;\n"],"sourceRoot":"/source/"}